apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-14T00:12:34Z"
    generateName: cert-manager-cainjector-8d6d9478-
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.5.4
      pod-template-hash: 8d6d9478
    name: cert-manager-cainjector-8d6d9478-c8kn4
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-8d6d9478
      uid: e5126340-965d-4f5a-9834-a090cdb92852
    resourceVersion: "132712"
    uid: ab6b648f-dfa0-4369-ab04-aeced208888c
  spec:
    containers:
    - args:
      - --v=2
      - --leader-election-namespace=kube-system
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-cainjector:v1.5.4
      imagePullPolicy: IfNotPresent
      name: cert-manager
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pwmqz
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
    serviceAccount: cert-manager-cainjector
    serviceAccountName: cert-manager-cainjector
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-pwmqz
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-14T00:12:34Z"
      message: '0/2 nodes are available: 2 node(s) were unschedulable. preemption:
        0/2 nodes are available: 2 Preemption is not helpful for scheduling.'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "9402"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-03-14T00:12:35Z"
    generateName: cert-manager-f6568867-
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.5.4
      pod-template-hash: f6568867
    name: cert-manager-f6568867-69lv6
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-f6568867
      uid: e2b533b8-8a82-422e-9767-33559504a210
    resourceVersion: "132727"
    uid: 3ce645a7-8a92-42b4-b381-e4776b41d5b8
  spec:
    containers:
    - args:
      - --v=2
      - --cluster-resource-namespace=$(POD_NAMESPACE)
      - --leader-election-namespace=kube-system
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-controller:v1.5.4
      imagePullPolicy: IfNotPresent
      name: cert-manager
      ports:
      - containerPort: 9402
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5gbvd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
    serviceAccount: cert-manager
    serviceAccountName: cert-manager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-5gbvd
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-14T00:12:35Z"
      message: '0/2 nodes are available: 2 node(s) were unschedulable. preemption:
        0/2 nodes are available: 2 Preemption is not helpful for scheduling.'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-14T00:12:09Z"
    generateName: cert-manager-webhook-8559f675ff-
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.5.4
      pod-template-hash: 8559f675ff
    name: cert-manager-webhook-8559f675ff-v6cvk
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-8559f675ff
      uid: 99981aff-f37b-498a-b56d-f1b68ae73947
    resourceVersion: "132484"
    uid: f37bfa7f-b815-4c22-b269-6e99f18bd862
  spec:
    containers:
    - args:
      - --v=2
      - --secure-port=10250
      - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
      - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
      - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-webhook:v1.5.4
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: cert-manager
      ports:
      - containerPort: 10250
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6tvd8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
    serviceAccount: cert-manager-webhook
    serviceAccountName: cert-manager-webhook
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-6tvd8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-14T00:12:09Z"
      message: '0/2 nodes are available: 2 node(s) were unschedulable. preemption:
        0/2 nodes are available: 2 Preemption is not helpful for scheduling.'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-14T00:12:10Z"
    generateName: eureka-
    labels:
      app: eureka
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: eureka-5c6f45db4f
      statefulset.kubernetes.io/pod-name: eureka-0
    name: eureka-0
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: eureka
      uid: e9ea47f3-8704-4113-9fc8-74f037fc8e0a
    resourceVersion: "132595"
    uid: 72d23322-e5a9-46bf-947e-6a56a980963e
  spec:
    containers:
    - env:
      - name: EUREKA_SERVER_ADDRESS
        valueFrom:
          configMapKeyRef:
            key: eureka_service_address
            name: configmap
      image: elfn/eureka:latest
      imagePullPolicy: Always
      name: eureka
      ports:
      - containerPort: 8761
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vrglk
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: eureka-0
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    subdomain: eureka-service
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-vrglk
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-14T00:12:10Z"
      message: '0/2 nodes are available: 2 node(s) were unschedulable. preemption:
        0/2 nodes are available: 2 Preemption is not helpful for scheduling.'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-14T00:12:35Z"
    generateName: foodcatalogueapp-5bf5c56fb6-
    labels:
      app: foodcatalogueapp
      pod-template-hash: 5bf5c56fb6
    name: foodcatalogueapp-5bf5c56fb6-6vm2g
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: foodcatalogueapp-5bf5c56fb6
      uid: 98034f47-d99d-4350-93b4-218f419b9dac
    resourceVersion: "132746"
    uid: 08837860-f431-4e6d-b7aa-ec9c9a275e01
  spec:
    containers:
    - env:
      - name: SPRING_DATASOURCE_USERNAME
        valueFrom:
          secretKeyRef:
            key: mysql-username
            name: secret
      - name: SPRING_DATASOURCE_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mysql-password
            name: secret
      - name: SPRING_DATASOURCE_URL
        valueFrom:
          configMapKeyRef:
            key: foodcataloguedb_url
            name: configmap
      image: elfn/food-catalogue-srv:latest
      imagePullPolicy: Always
      name: foodcatalogueapp
      ports:
      - containerPort: 9092
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4898n
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-4898n
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-14T00:12:35Z"
      message: '0/2 nodes are available: 2 node(s) were unschedulable. preemption:
        0/2 nodes are available: 2 Preemption is not helpful for scheduling.'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-14T00:12:09Z"
    generateName: orderapp-6b76d9655c-
    labels:
      app: orderapp
      pod-template-hash: 6b76d9655c
    name: orderapp-6b76d9655c-k96dh
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: orderapp-6b76d9655c
      uid: 1b4cb969-41d0-4490-99ec-1b1e434abd50
    resourceVersion: "132508"
    uid: c3265fce-40d3-47aa-a777-28d0eb68f8b0
  spec:
    containers:
    - env:
      - name: JAVA_TOOL_OPTIONS
        value: -Djdk.tls.client.protocols=TLSv1.2
      - name: SPRING_DATA_MONGODB_URI
        valueFrom:
          configMapKeyRef:
            key: orderdb_url
            name: configmap
      - name: SPRING_DATA_MONGODB_DATABASE
        value: orderdb
      image: elfn/order-srv:latest
      imagePullPolicy: Always
      name: orderapp
      ports:
      - containerPort: 9094
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2tl9k
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-2tl9k
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-14T00:12:09Z"
      message: '0/2 nodes are available: 2 node(s) were unschedulable. preemption:
        0/2 nodes are available: 2 Preemption is not helpful for scheduling.'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-14T00:12:35Z"
    generateName: restaurantapp-6b5f66885b-
    labels:
      app: restaurantapp
      pod-template-hash: 6b5f66885b
    name: restaurantapp-6b5f66885b-7lbp6
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: restaurantapp-6b5f66885b
      uid: ed1a6135-c758-4a61-8dcf-f113632cf1bc
    resourceVersion: "132762"
    uid: bd5f6848-19f0-485c-99de-2791d64b4e24
  spec:
    containers:
    - env:
      - name: SPRING_DATASOURCE_USERNAME
        valueFrom:
          secretKeyRef:
            key: mysql-username
            name: secret
      - name: SPRING_DATASOURCE_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mysql-password
            name: secret
      - name: SPRING_DATASOURCE_URL
        valueFrom:
          configMapKeyRef:
            key: restaurantdb_url
            name: configmap
      image: elfn/restaurant-srv:latest
      imagePullPolicy: Always
      name: restaurantapp
      ports:
      - containerPort: 9091
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2z52x
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-2z52x
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-14T00:12:35Z"
      message: '0/2 nodes are available: 2 node(s) were unschedulable. preemption:
        0/2 nodes are available: 2 Preemption is not helpful for scheduling.'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-14T00:12:09Z"
    generateName: userapp-59ddd4b6db-
    labels:
      app: userapp
      pod-template-hash: 59ddd4b6db
    name: userapp-59ddd4b6db-m9zkc
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: userapp-59ddd4b6db
      uid: 5061ac77-73fc-4694-8576-9beb4e751d9c
    resourceVersion: "132524"
    uid: 7b6626e1-543f-4d26-9a15-0ecf451f5095
  spec:
    containers:
    - env:
      - name: SPRING_DATASOURCE_USERNAME
        valueFrom:
          secretKeyRef:
            key: mysql-username
            name: secret
      - name: SPRING_DATASOURCE_PASSWORD
        valueFrom:
          secretKeyRef:
            key: mysql-password
            name: secret
      - name: SPRING_DATASOURCE_URL
        valueFrom:
          configMapKeyRef:
            key: userdb_url
            name: configmap
      image: elfn/user-srv:latest
      imagePullPolicy: Always
      name: userapp
      ports:
      - containerPort: 9093
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mpj7c
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-mpj7c
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-14T00:12:09Z"
      message: '0/2 nodes are available: 2 node(s) were unschedulable. preemption:
        0/2 nodes are available: 2 Preemption is not helpful for scheduling.'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-14T00:12:09Z"
    generateName: aws-load-balancer-controller-656548cdd8-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/name: aws-load-balancer-controller
      pod-template-hash: 656548cdd8
    name: aws-load-balancer-controller-656548cdd8-bvxbz
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: aws-load-balancer-controller-656548cdd8
      uid: a165fd58-3a63-43c4-87aa-b7688de4bc34
    resourceVersion: "132538"
    uid: 2d23d044-5c49-476a-affd-1d29bd08ad21
  spec:
    containers:
    - args:
      - --cluster-name=aws-eks-cluster
      - --ingress-class=alb
      - --aws-vpc-id=vpc-0b8cd57099bf44a35
      - --aws-region=us-east-2
      env:
      - name: AWS_STS_REGIONAL_ENDPOINTS
        value: regional
      - name: AWS_DEFAULT_REGION
        value: us-east-2
      - name: AWS_REGION
        value: us-east-2
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::767398100244:role/AmazonEKSLoadBalancerControllerRole
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      image: codedecode25/aws-load-balancer:v2.4.7
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 2
        httpGet:
          path: /healthz
          port: 61779
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: controller
      ports:
      - containerPort: 9443
        name: webhook-server
        protocol: TCP
      resources:
        limits:
          cpu: 200m
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp/k8s-webhook-server/serving-certs
        name: cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qgdkh
        readOnly: true
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1337
    serviceAccount: aws-load-balancer-controller
    serviceAccountName: aws-load-balancer-controller
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: aws-iam-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
    - name: cert
      secret:
        defaultMode: 420
        secretName: aws-load-balancer-webhook-tls
    - name: kube-api-access-qgdkh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-14T00:12:09Z"
      message: '0/2 nodes are available: 2 node(s) were unschedulable. preemption:
        0/2 nodes are available: 2 Preemption is not helpful for scheduling.'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: Burstable
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-13T14:48:56Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 6b48c4d684
      k8s-app: aws-node
      pod-template-generation: "1"
    name: aws-node-nrmpb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: c5d12d62-0494-460c-b368-2abdb2eece84
    resourceVersion: "5927"
    uid: 0e2bd1be-0e3f-4261-afdf-35692079af87
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-30-55.us-east-2.compute.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_NAME
        value: aws-eks-cluster
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: VPC_CNI_VERSION
        value: v1.16.0
      - name: VPC_ID
        value: vpc-0b8cd57099bf44a35
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon-k8s-cni:v1.16.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8kwv8
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon/aws-network-policy-agent:v1.0.7-eksbuild.1
      imagePullPolicy: IfNotPresent
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8kwv8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon-k8s-cni-init:v1.16.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8kwv8
        readOnly: true
    nodeName: ip-192-168-30-55.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: ""
      name: xtables-lock
    - name: kube-api-access-8kwv8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:01Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:06Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:28Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:28Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:48:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://26473f7ba47330849d9f438f22ea1358569f4877bb414124bc6d1b277c4daae9
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon/aws-network-policy-agent:v1.0.7-eksbuild.1
      imageID: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon/aws-network-policy-agent@sha256:0e7fd75230dee735c1636ad86d69bf38b1bc48e1b78459147957827d978e5635
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-03-13T14:49:27Z"
    - containerID: containerd://395eaf9548e6b787eeec21806f82d52abc0a74357764f9105f1a8e46647c0ece
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni:v1.16.0
      imageID: sha256:9f5f0940394bf3b1d9c2ff50fa431c0476ff6c86931eea30ff300c0bb61b6a3a
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-03-13T14:49:07Z"
    hostIP: 192.168.30.55
    hostIPs:
    - ip: 192.168.30.55
    initContainerStatuses:
    - containerID: containerd://607a6bce5270a0e37ff58e7e5732f8db45eec41dd353b7895b40965317977819
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni-init:v1.16.0
      imageID: sha256:71e920abf69c417dd5054dd0792e3e32d67d624aacf9d902e912570dc977c8b9
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://607a6bce5270a0e37ff58e7e5732f8db45eec41dd353b7895b40965317977819
          exitCode: 0
          finishedAt: "2024-03-13T14:49:01Z"
          reason: Completed
          startedAt: "2024-03-13T14:49:01Z"
    phase: Running
    podIP: 192.168.30.55
    podIPs:
    - ip: 192.168.30.55
    qosClass: Burstable
    startTime: "2024-03-13T14:48:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-13T14:48:54Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 6b48c4d684
      k8s-app: aws-node
      pod-template-generation: "1"
    name: aws-node-nrqxx
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: c5d12d62-0494-460c-b368-2abdb2eece84
    resourceVersion: "5917"
    uid: 4bf32f25-328a-4b0e-9abb-9fa8f8ebf9a3
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-39-199.us-east-2.compute.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_NAME
        value: aws-eks-cluster
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: VPC_CNI_VERSION
        value: v1.16.0
      - name: VPC_ID
        value: vpc-0b8cd57099bf44a35
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon-k8s-cni:v1.16.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-msgsl
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon/aws-network-policy-agent:v1.0.7-eksbuild.1
      imagePullPolicy: IfNotPresent
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-msgsl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon-k8s-cni-init:v1.16.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-msgsl
        readOnly: true
    nodeName: ip-192-168-39-199.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: ""
      name: xtables-lock
    - name: kube-api-access-msgsl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:48:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:04Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:28Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:28Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:48:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8d916990cbcab70dc26a480b3fee83f0b6918c880e5b514f7099302bb7421bdb
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon/aws-network-policy-agent:v1.0.7-eksbuild.1
      imageID: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon/aws-network-policy-agent@sha256:0e7fd75230dee735c1636ad86d69bf38b1bc48e1b78459147957827d978e5635
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-03-13T14:49:27Z"
    - containerID: containerd://5e8aa663ef3dede1e3a192e16861568d145a5f14c64698825d751af5f5c69e8a
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni:v1.16.0
      imageID: sha256:9f5f0940394bf3b1d9c2ff50fa431c0476ff6c86931eea30ff300c0bb61b6a3a
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-03-13T14:49:05Z"
    hostIP: 192.168.39.199
    hostIPs:
    - ip: 192.168.39.199
    initContainerStatuses:
    - containerID: containerd://10371843200c9df53ee8762db46c253dde9a9aeaf36a9f4679b379ac2c0ee486
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni-init:v1.16.0
      imageID: sha256:71e920abf69c417dd5054dd0792e3e32d67d624aacf9d902e912570dc977c8b9
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://10371843200c9df53ee8762db46c253dde9a9aeaf36a9f4679b379ac2c0ee486
          exitCode: 0
          finishedAt: "2024-03-13T14:48:59Z"
          reason: Completed
          startedAt: "2024-03-13T14:48:59Z"
    phase: Running
    podIP: 192.168.39.199
    podIPs:
    - ip: 192.168.39.199
    qosClass: Burstable
    startTime: "2024-03-13T14:48:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-14T00:12:09Z"
    generateName: coredns-6556f9967c-
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 6556f9967c
    name: coredns-6556f9967c-2xnxf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-6556f9967c
      uid: b5a9c5f5-7529-4989-8037-825b629cb3d3
    resourceVersion: "132560"
    uid: 1a776bde-4ea2-4073-be7e-73cdb153dc33
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
              - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/eks/coredns:v1.11.1-eksbuild.4
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-88w5m
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-88w5m
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-14T00:12:09Z"
      message: '0/2 nodes are available: 2 node(s) were unschedulable. preemption:
        0/2 nodes are available: 2 Preemption is not helpful for scheduling.'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: Burstable
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-13T14:13:56Z"
    generateName: coredns-6556f9967c-
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 6556f9967c
    name: coredns-6556f9967c-qhd7l
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-6556f9967c
      uid: b5a9c5f5-7529-4989-8037-825b629cb3d3
    resourceVersion: "5830"
    uid: 282eed3f-1272-4799-9405-23b5e28e8af1
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
              - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/eks/coredns:v1.11.1-eksbuild.4
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lf9wb
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ip-192-168-30-55.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-lf9wb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:18Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:18Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:18Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://52a49de0e77638798844d61917f53b3369e620f8c23376c378dc7f14fcbbcf44
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/eks/coredns:v1.11.1-eksbuild.4
      imageID: 602401143452.dkr.ecr.us-east-2.amazonaws.com/eks/coredns@sha256:25c8d2f85de97de3633c09553c65f1c34bc3e16b6d896e7e72ed01711eed3e0f
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-03-13T14:49:17Z"
    hostIP: 192.168.30.55
    hostIPs:
    - ip: 192.168.30.55
    phase: Running
    podIP: 192.168.24.128
    podIPs:
    - ip: 192.168.24.128
    qosClass: Burstable
    startTime: "2024-03-13T14:49:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-13T14:48:54Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 5f964b49b9
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-2vzxd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: c7a9a453-10fb-4aee-8e83-f3be03af4a3a
    resourceVersion: "5705"
    uid: a3299eb7-975a-4483-a31a-63536128effd
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-39-199.us-east-2.compute.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/eks/kube-proxy:v1.29.0-minimal-eksbuild.1
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-t6lw5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-39-199.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-t6lw5
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:48:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:48:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:48:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:48:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:48:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://40af2ddff02634fbd85314e1aeab335cd9ad9339c4e2c959d28aa8720ee1a182
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/eks/kube-proxy:v1.29.0-minimal-eksbuild.1
      imageID: sha256:2cfbeaf5dd9ad6aaa5cd2f4aa902ab620054bb507be8779a53224d31f2e2f227
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-03-13T14:48:58Z"
    hostIP: 192.168.39.199
    hostIPs:
    - ip: 192.168.39.199
    phase: Running
    podIP: 192.168.39.199
    podIPs:
    - ip: 192.168.39.199
    qosClass: Burstable
    startTime: "2024-03-13T14:48:55Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-03-13T14:48:56Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 5f964b49b9
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-p4mtg
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: c7a9a453-10fb-4aee-8e83-f3be03af4a3a
    resourceVersion: "5727"
    uid: 0c8c914f-499e-4d5f-8412-bb2fcf3f7a94
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-30-55.us-east-2.compute.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/eks/kube-proxy:v1.29.0-minimal-eksbuild.1
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-kzjm4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-30-55.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-kzjm4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:01Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:48:56Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:01Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:49:01Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-03-13T14:48:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a475d80978f49af4435de001a43163b785ad28415d9cb00b0aeca582268d757d
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/eks/kube-proxy:v1.29.0-minimal-eksbuild.1
      imageID: sha256:2cfbeaf5dd9ad6aaa5cd2f4aa902ab620054bb507be8779a53224d31f2e2f227
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-03-13T14:49:00Z"
    hostIP: 192.168.30.55
    hostIPs:
    - ip: 192.168.30.55
    phase: Running
    podIP: 192.168.30.55
    podIPs:
    - ip: 192.168.30.55
    qosClass: Burstable
    startTime: "2024-03-13T14:48:56Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.5.4"},"name":"cert-manager","namespace":"cert-manager"},"spec":{"ports":[{"name":"tcp-prometheus-servicemonitor","port":9402,"protocol":"TCP","targetPort":9402}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"},"type":"ClusterIP"}}
    creationTimestamp: "2024-03-13T17:19:31Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.5.4
    name: cert-manager
    namespace: cert-manager
    resourceVersion: "31179"
    uid: 9e7590ab-9c70-4b9b-9875-cae419c79ce8
  spec:
    clusterIP: 10.100.228.111
    clusterIPs:
    - 10.100.228.111
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-prometheus-servicemonitor
      port: 9402
      protocol: TCP
      targetPort: 9402
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.5.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"ports":[{"name":"https","port":443,"protocol":"TCP","targetPort":10250}],"selector":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook"},"type":"ClusterIP"}}
    creationTimestamp: "2024-03-13T17:19:32Z"
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.5.4
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "31184"
    uid: fd319907-39f8-43b8-b0d8-78e8400e61fb
  spec:
    clusterIP: 10.100.141.231
    clusterIPs:
    - 10.100.141.231
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 10250
    selector:
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"eureka-service"},"name":"eureka-service","namespace":"default"},"spec":{"ports":[{"port":8761,"protocol":"TCP","targetPort":8761}],"selector":{"app":"eureka"}}}
    creationTimestamp: "2024-03-13T14:25:12Z"
    labels:
      app: eureka-service
    name: eureka-service
    namespace: default
    resourceVersion: "8386"
    uid: 716311ea-57da-4ac2-8276-0deaa23551b4
  spec:
    clusterIP: 10.100.217.43
    clusterIPs:
    - 10.100.217.43
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 8761
      protocol: TCP
      targetPort: 8761
    selector:
      app: eureka
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"foodcatalogue-service","namespace":"default"},"spec":{"ports":[{"port":9092,"protocol":"TCP","targetPort":9092}],"selector":{"app":"foodcatalogueapp"}}}
    creationTimestamp: "2024-03-13T16:53:04Z"
    name: foodcatalogue-service
    namespace: default
    resourceVersion: "27329"
    uid: 2c622117-a3a5-4278-be41-41d023038c12
  spec:
    clusterIP: 10.100.81.58
    clusterIPs:
    - 10.100.81.58
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 9092
      protocol: TCP
      targetPort: 9092
    selector:
      app: foodcatalogueapp
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-03-13T14:12:46Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "191"
    uid: 38433448-ef1b-4a23-923d-988081fc4781
  spec:
    clusterIP: 10.100.0.1
    clusterIPs:
    - 10.100.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"order-service","namespace":"default"},"spec":{"ports":[{"port":9094,"protocol":"TCP","targetPort":9094}],"selector":{"app":"orderapp"}}}
    creationTimestamp: "2024-03-13T16:53:05Z"
    name: order-service
    namespace: default
    resourceVersion: "27334"
    uid: 27686ec6-038d-43f2-9288-ece7f84e79e9
  spec:
    clusterIP: 10.100.132.142
    clusterIPs:
    - 10.100.132.142
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 9094
      protocol: TCP
      targetPort: 9094
    selector:
      app: orderapp
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"restaurant-service","namespace":"default"},"spec":{"ports":[{"port":9091,"protocol":"TCP","targetPort":9091}],"selector":{"app":"restaurantapp"}}}
    creationTimestamp: "2024-03-13T16:53:06Z"
    name: restaurant-service
    namespace: default
    resourceVersion: "27340"
    uid: d43f476e-e813-47f3-9143-5f17388bb263
  spec:
    clusterIP: 10.100.229.88
    clusterIPs:
    - 10.100.229.88
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 9091
      protocol: TCP
      targetPort: 9091
    selector:
      app: restaurantapp
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"user-service","namespace":"default"},"spec":{"ports":[{"port":9093,"protocol":"TCP","targetPort":9093}],"selector":{"app":"userapp"}}}
    creationTimestamp: "2024-03-13T16:53:06Z"
    name: user-service
    namespace: default
    resourceVersion: "27345"
    uid: 1791dff9-72e7-4b4f-a63c-0086bc493f7e
  spec:
    clusterIP: 10.100.77.106
    clusterIPs:
    - 10.100.77.106
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 9093
      protocol: TCP
      targetPort: 9093
    selector:
      app: userapp
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/name":"aws-load-balancer-controller"},"name":"aws-load-balancer-webhook-service","namespace":"kube-system"},"spec":{"ports":[{"port":443,"targetPort":9443}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/name":"aws-load-balancer-controller"}}}
    creationTimestamp: "2024-03-13T17:26:02Z"
    labels:
      app.kubernetes.io/name: aws-load-balancer-controller
    name: aws-load-balancer-webhook-service
    namespace: kube-system
    resourceVersion: "32689"
    uid: a0331cca-2aa4-4aad-97e9-ea7fecd82e2e
  spec:
    clusterIP: 10.100.224.212
    clusterIPs:
    - 10.100.224.212
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 443
      protocol: TCP
      targetPort: 9443
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/name: aws-load-balancer-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-03-13T14:13:56Z"
    labels:
      eks.amazonaws.com/component: kube-dns
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: kube-dns
    namespace: kube-system
    resourceVersion: "488"
    uid: 84d4cce3-0a1b-409e-b860-9304ee577ef2
  spec:
    clusterIP: 10.100.0.10
    clusterIPs:
    - 10.100.0.10
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-03-13T14:13:56Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: aws-node
      app.kubernetes.io/version: v1.16.0
      helm.sh/chart: aws-vpc-cni-1.16.0
      k8s-app: aws-node
    name: aws-node
    namespace: kube-system
    resourceVersion: "5928"
    uid: c5d12d62-0494-460c-b368-2abdb2eece84
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: aws-node
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: aws-vpc-cni
          app.kubernetes.io/name: aws-node
          k8s-app: aws-node
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - env:
          - name: ADDITIONAL_ENI_TAGS
            value: '{}'
          - name: ANNOTATE_POD_IP
            value: "false"
          - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
            value: "true"
          - name: AWS_VPC_ENI_MTU
            value: "9001"
          - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
            value: "false"
          - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
            value: "false"
          - name: AWS_VPC_K8S_CNI_LOGLEVEL
            value: DEBUG
          - name: AWS_VPC_K8S_CNI_LOG_FILE
            value: /host/var/log/aws-routed-eni/ipamd.log
          - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
            value: prng
          - name: AWS_VPC_K8S_CNI_VETHPREFIX
            value: eni
          - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
            value: /var/log/aws-routed-eni/plugin.log
          - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
            value: DEBUG
          - name: CLUSTER_NAME
            value: aws-eks-cluster
          - name: DISABLE_INTROSPECTION
            value: "false"
          - name: DISABLE_METRICS
            value: "false"
          - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
            value: "false"
          - name: ENABLE_IPv4
            value: "true"
          - name: ENABLE_IPv6
            value: "false"
          - name: ENABLE_POD_ENI
            value: "false"
          - name: ENABLE_PREFIX_DELEGATION
            value: "false"
          - name: VPC_CNI_VERSION
            value: v1.16.0
          - name: VPC_ID
            value: vpc-0b8cd57099bf44a35
          - name: WARM_ENI_TARGET
            value: "1"
          - name: WARM_PREFIX_TARGET
            value: "1"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon-k8s-cni:v1.16.0-eksbuild.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: aws-node
          ports:
          - containerPort: 61678
            name: metrics
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /host/var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
          - mountPath: /run/xtables.lock
            name: xtables-lock
        - args:
          - --enable-ipv6=false
          - --enable-network-policy=false
          - --enable-cloudwatch-logs=false
          - --enable-policy-event-logs=false
          - --metrics-bind-addr=:8162
          - --health-probe-bind-addr=:8163
          - --conntrack-cache-cleanup-period=300
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon/aws-network-policy-agent:v1.0.7-eksbuild.1
          imagePullPolicy: IfNotPresent
          name: aws-eks-nodeagent
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /sys/fs/bpf
            name: bpf-pin-path
          - mountPath: /var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - env:
          - name: DISABLE_TCP_EARLY_DEMUX
            value: "false"
          - name: ENABLE_IPv6
            value: "false"
          image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/amazon-k8s-cni-init:v1.16.0-eksbuild.1
          imagePullPolicy: IfNotPresent
          name: aws-vpc-cni-init
          resources:
            requests:
              cpu: 25m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: aws-node
        serviceAccountName: aws-node
        terminationGracePeriodSeconds: 10
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /sys/fs/bpf
            type: ""
          name: bpf-pin-path
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/aws-routed-eni
            type: DirectoryOrCreate
          name: log-dir
        - hostPath:
            path: /var/run/aws-node
            type: DirectoryOrCreate
          name: run-dir
        - hostPath:
            path: /run/xtables.lock
            type: ""
          name: xtables-lock
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-03-13T14:13:55Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: kube-proxy
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "5728"
    uid: c7a9a453-10fb-4aee-8e83-f3be03af4a3a
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - command:
          - kube-proxy
          - --v=2
          - --config=/var/lib/kube-proxy-config/config
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/eks/kube-proxy:v1.29.0-minimal-eksbuild.1
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources:
            requests:
              cpu: 100m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/log
            name: varlog
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /var/lib/kube-proxy/
            name: kubeconfig
          - mountPath: /var/lib/kube-proxy-config/
            name: config
        dnsPolicy: ClusterFirst
        hostNetwork: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kubeconfig
        - configMap:
            defaultMode: 420
            name: kube-proxy-config
          name: config
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.5.4"},"name":"cert-manager","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager"}},"template":{"metadata":{"annotations":{"prometheus.io/path":"/metrics","prometheus.io/port":"9402","prometheus.io/scrape":"true"},"labels":{"app":"cert-manager","app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cert-manager","app.kubernetes.io/version":"v1.5.4"}},"spec":{"containers":[{"args":["--v=2","--cluster-resource-namespace=$(POD_NAMESPACE)","--leader-election-namespace=kube-system"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-controller:v1.5.4","imagePullPolicy":"IfNotPresent","name":"cert-manager","ports":[{"containerPort":9402,"protocol":"TCP"}],"resources":{}}],"securityContext":{"runAsNonRoot":true},"serviceAccountName":"cert-manager"}}}}
    creationTimestamp: "2024-03-13T17:19:32Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.5.4
    name: cert-manager
    namespace: cert-manager
    resourceVersion: "132734"
    uid: 47177b7f-9c86-44c9-8a74-5eeaeeef87e3
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.5.4
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.5.4
          imagePullPolicy: IfNotPresent
          name: cert-manager
          ports:
          - containerPort: 9402
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2024-03-13T17:19:32Z"
      lastUpdateTime: "2024-03-13T17:19:36Z"
      message: ReplicaSet "cert-manager-f6568867" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-03-14T00:12:35Z"
      lastUpdateTime: "2024-03-14T00:12:35Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"cainjector","app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector","app.kubernetes.io/version":"v1.5.4"},"name":"cert-manager-cainjector","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector"}},"template":{"metadata":{"labels":{"app":"cainjector","app.kubernetes.io/component":"cainjector","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"cainjector","app.kubernetes.io/version":"v1.5.4"}},"spec":{"containers":[{"args":["--v=2","--leader-election-namespace=kube-system"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-cainjector:v1.5.4","imagePullPolicy":"IfNotPresent","name":"cert-manager","resources":{}}],"securityContext":{"runAsNonRoot":true},"serviceAccountName":"cert-manager-cainjector"}}}}
    creationTimestamp: "2024-03-13T17:19:32Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.5.4
    name: cert-manager-cainjector
    namespace: cert-manager
    resourceVersion: "132716"
    uid: cb43adb7-6845-4881-b720-9cab1c6279cf
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.5.4
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.5.4
          imagePullPolicy: IfNotPresent
          name: cert-manager
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2024-03-13T17:19:32Z"
      lastUpdateTime: "2024-03-13T17:19:35Z"
      message: ReplicaSet "cert-manager-cainjector-8d6d9478" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-03-14T00:12:35Z"
      lastUpdateTime: "2024-03-14T00:12:35Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.5.4"},"name":"cert-manager-webhook","namespace":"cert-manager"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook"}},"template":{"metadata":{"labels":{"app":"webhook","app.kubernetes.io/component":"webhook","app.kubernetes.io/instance":"cert-manager","app.kubernetes.io/name":"webhook","app.kubernetes.io/version":"v1.5.4"}},"spec":{"containers":[{"args":["--v=2","--secure-port=10250","--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)","--dynamic-serving-ca-secret-name=cert-manager-webhook-ca","--dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"quay.io/jetstack/cert-manager-webhook:v1.5.4","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/livez","port":6080,"scheme":"HTTP"},"initialDelaySeconds":60,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"cert-manager","ports":[{"containerPort":10250,"name":"https","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":6080,"scheme":"HTTP"},"initialDelaySeconds":5,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":1},"resources":{}}],"securityContext":{"runAsNonRoot":true},"serviceAccountName":"cert-manager-webhook"}}}}
    creationTimestamp: "2024-03-13T17:19:33Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.5.4
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "132496"
    uid: 898eb1b0-e3fb-45ac-8b5c-706eb6408679
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.5.4
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.5.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2024-03-13T17:19:33Z"
      lastUpdateTime: "2024-03-13T17:19:43Z"
      message: ReplicaSet "cert-manager-webhook-8559f675ff" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-03-14T00:12:09Z"
      lastUpdateTime: "2024-03-14T00:12:09Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"foodcatalogueapp"},"name":"foodcatalogueapp","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"foodcatalogueapp"}},"template":{"metadata":{"labels":{"app":"foodcatalogueapp"}},"spec":{"containers":[{"env":[{"name":"SPRING_DATASOURCE_USERNAME","valueFrom":{"secretKeyRef":{"key":"mysql-username","name":"secret"}}},{"name":"SPRING_DATASOURCE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"mysql-password","name":"secret"}}},{"name":"SPRING_DATASOURCE_URL","valueFrom":{"configMapKeyRef":{"key":"foodcataloguedb_url","name":"configmap"}}}],"image":"elfn/food-catalogue-srv:latest","imagePullPolicy":"Always","name":"foodcatalogueapp","ports":[{"containerPort":9092}]}]}}}}
    creationTimestamp: "2024-03-13T16:53:24Z"
    generation: 2
    labels:
      app: foodcatalogueapp
    name: foodcatalogueapp
    namespace: default
    resourceVersion: "132752"
    uid: 55a1d494-3bd4-4533-849c-c47d7729fe67
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: foodcatalogueapp
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: foodcatalogueapp
      spec:
        containers:
        - env:
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                key: mysql-username
                name: secret
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mysql-password
                name: secret
          - name: SPRING_DATASOURCE_URL
            valueFrom:
              configMapKeyRef:
                key: foodcataloguedb_url
                name: configmap
          image: elfn/food-catalogue-srv:latest
          imagePullPolicy: Always
          name: foodcatalogueapp
          ports:
          - containerPort: 9092
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2024-03-13T16:53:24Z"
      lastUpdateTime: "2024-03-13T16:53:26Z"
      message: ReplicaSet "foodcatalogueapp-5bf5c56fb6" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-03-14T00:12:35Z"
      lastUpdateTime: "2024-03-14T00:12:35Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 2
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"orderapp","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"orderapp"}},"template":{"metadata":{"labels":{"app":"orderapp"}},"spec":{"containers":[{"env":[{"name":"JAVA_TOOL_OPTIONS","value":"-Djdk.tls.client.protocols=TLSv1.2"},{"name":"SPRING_DATA_MONGODB_URI","valueFrom":{"configMapKeyRef":{"key":"orderdb_url","name":"configmap"}}},{"name":"SPRING_DATA_MONGODB_DATABASE","value":"orderdb"}],"image":"elfn/order-srv:latest","imagePullPolicy":"Always","name":"orderapp","ports":[{"containerPort":9094}]}]}}}}
    creationTimestamp: "2024-03-13T16:53:25Z"
    generation: 2
    name: orderapp
    namespace: default
    resourceVersion: "132516"
    uid: 3b3bc09a-58ee-42b9-b7f5-99b83cd6d7ab
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: orderapp
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: orderapp
      spec:
        containers:
        - env:
          - name: JAVA_TOOL_OPTIONS
            value: -Djdk.tls.client.protocols=TLSv1.2
          - name: SPRING_DATA_MONGODB_URI
            valueFrom:
              configMapKeyRef:
                key: orderdb_url
                name: configmap
          - name: SPRING_DATA_MONGODB_DATABASE
            value: orderdb
          image: elfn/order-srv:latest
          imagePullPolicy: Always
          name: orderapp
          ports:
          - containerPort: 9094
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2024-03-13T16:53:25Z"
      lastUpdateTime: "2024-03-13T16:53:27Z"
      message: ReplicaSet "orderapp-6b76d9655c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-03-14T00:12:09Z"
      lastUpdateTime: "2024-03-14T00:12:09Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 2
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"restaurantapp"},"name":"restaurantapp","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"restaurantapp"}},"template":{"metadata":{"labels":{"app":"restaurantapp"}},"spec":{"containers":[{"env":[{"name":"SPRING_DATASOURCE_USERNAME","valueFrom":{"secretKeyRef":{"key":"mysql-username","name":"secret"}}},{"name":"SPRING_DATASOURCE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"mysql-password","name":"secret"}}},{"name":"SPRING_DATASOURCE_URL","valueFrom":{"configMapKeyRef":{"key":"restaurantdb_url","name":"configmap"}}}],"image":"elfn/restaurant-srv:latest","imagePullPolicy":"Always","name":"restaurantapp","ports":[{"containerPort":9091}]}]}}}}
    creationTimestamp: "2024-03-13T16:53:25Z"
    generation: 2
    labels:
      app: restaurantapp
    name: restaurantapp
    namespace: default
    resourceVersion: "132766"
    uid: f05c7818-ad20-4bf4-a407-4818a0056073
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: restaurantapp
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: restaurantapp
      spec:
        containers:
        - env:
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                key: mysql-username
                name: secret
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mysql-password
                name: secret
          - name: SPRING_DATASOURCE_URL
            valueFrom:
              configMapKeyRef:
                key: restaurantdb_url
                name: configmap
          image: elfn/restaurant-srv:latest
          imagePullPolicy: Always
          name: restaurantapp
          ports:
          - containerPort: 9091
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2024-03-13T16:53:25Z"
      lastUpdateTime: "2024-03-13T16:53:27Z"
      message: ReplicaSet "restaurantapp-6b5f66885b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-03-14T00:12:35Z"
      lastUpdateTime: "2024-03-14T00:12:35Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 2
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"userapp"},"name":"userapp","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"userapp"}},"template":{"metadata":{"labels":{"app":"userapp"}},"spec":{"containers":[{"env":[{"name":"SPRING_DATASOURCE_USERNAME","valueFrom":{"secretKeyRef":{"key":"mysql-username","name":"secret"}}},{"name":"SPRING_DATASOURCE_PASSWORD","valueFrom":{"secretKeyRef":{"key":"mysql-password","name":"secret"}}},{"name":"SPRING_DATASOURCE_URL","valueFrom":{"configMapKeyRef":{"key":"userdb_url","name":"configmap"}}}],"image":"elfn/user-srv:latest","imagePullPolicy":"Always","name":"userapp","ports":[{"containerPort":9093}]}]}}}}
    creationTimestamp: "2024-03-13T16:53:25Z"
    generation: 2
    labels:
      app: userapp
    name: userapp
    namespace: default
    resourceVersion: "132529"
    uid: 874e4422-77b7-4ff9-9cba-fbd1e7542e83
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: userapp
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: userapp
      spec:
        containers:
        - env:
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                key: mysql-username
                name: secret
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mysql-password
                name: secret
          - name: SPRING_DATASOURCE_URL
            valueFrom:
              configMapKeyRef:
                key: userdb_url
                name: configmap
          image: elfn/user-srv:latest
          imagePullPolicy: Always
          name: userapp
          ports:
          - containerPort: 9093
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2024-03-13T16:53:26Z"
      lastUpdateTime: "2024-03-13T16:53:28Z"
      message: ReplicaSet "userapp-59ddd4b6db" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-03-14T00:12:09Z"
      lastUpdateTime: "2024-03-14T00:12:09Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 2
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/name":"aws-load-balancer-controller"},"name":"aws-load-balancer-controller","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/name":"aws-load-balancer-controller"}},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/name":"aws-load-balancer-controller"}},"spec":{"containers":[{"args":["--cluster-name=aws-eks-cluster","--ingress-class=alb","--aws-vpc-id=vpc-0b8cd57099bf44a35","--aws-region=us-east-2"],"image":"codedecode25/aws-load-balancer:v2.4.7","livenessProbe":{"failureThreshold":2,"httpGet":{"path":"/healthz","port":61779,"scheme":"HTTP"},"initialDelaySeconds":30,"timeoutSeconds":10},"name":"controller","ports":[{"containerPort":9443,"name":"webhook-server","protocol":"TCP"}],"resources":{"limits":{"cpu":"200m","memory":"500Mi"},"requests":{"cpu":"100m","memory":"200Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsNonRoot":true},"volumeMounts":[{"mountPath":"/tmp/k8s-webhook-server/serving-certs","name":"cert","readOnly":true}]}],"priorityClassName":"system-cluster-critical","securityContext":{"fsGroup":1337},"serviceAccountName":"aws-load-balancer-controller","terminationGracePeriodSeconds":10,"volumes":[{"name":"cert","secret":{"defaultMode":420,"secretName":"aws-load-balancer-webhook-tls"}}]}}}}
    creationTimestamp: "2024-03-13T17:26:03Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/name: aws-load-balancer-controller
    name: aws-load-balancer-controller
    namespace: kube-system
    resourceVersion: "132555"
    uid: 53057b5d-1eab-44d2-b790-60e25bb5c392
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/name: aws-load-balancer-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/name: aws-load-balancer-controller
      spec:
        containers:
        - args:
          - --cluster-name=aws-eks-cluster
          - --ingress-class=alb
          - --aws-vpc-id=vpc-0b8cd57099bf44a35
          - --aws-region=us-east-2
          image: codedecode25/aws-load-balancer:v2.4.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: 61779
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: controller
          ports:
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: aws-load-balancer-controller
        serviceAccountName: aws-load-balancer-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: aws-load-balancer-webhook-tls
  status:
    conditions:
    - lastTransitionTime: "2024-03-13T17:26:03Z"
      lastUpdateTime: "2024-03-13T17:26:08Z"
      message: ReplicaSet "aws-load-balancer-controller-656548cdd8" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-03-14T00:12:09Z"
      lastUpdateTime: "2024-03-14T00:12:09Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-03-13T14:13:56Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      kubernetes.io/name: CoreDNS
    name: coredns
    namespace: kube-system
    resourceVersion: "132570"
    uid: e9d0bcf6-2054-4c07-b5da-92a7b29646db
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        eks.amazonaws.com/component: coredns
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          eks.amazonaws.com/component: coredns
          k8s-app: kube-dns
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/eks/coredns:v1.11.1-eksbuild.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-03-13T14:49:18Z"
      lastUpdateTime: "2024-03-13T14:49:18Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-03-13T14:49:18Z"
      lastUpdateTime: "2024-03-13T14:49:18Z"
      message: ReplicaSet "coredns-6556f9967c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 2
    unavailableReplicas: 1
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-03-13T17:19:32Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.5.4
      pod-template-hash: 8d6d9478
    name: cert-manager-cainjector-8d6d9478
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: cb43adb7-6845-4881-b720-9cab1c6279cf
    resourceVersion: "132715"
    uid: e5126340-965d-4f5a-9834-a090cdb92852
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: 8d6d9478
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.5.4
          pod-template-hash: 8d6d9478
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.5.4
          imagePullPolicy: IfNotPresent
          name: cert-manager
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-03-13T17:19:32Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.5.4
      pod-template-hash: f6568867
    name: cert-manager-f6568867
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: 47177b7f-9c86-44c9-8a74-5eeaeeef87e3
    resourceVersion: "132733"
    uid: e2b533b8-8a82-422e-9767-33559504a210
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: f6568867
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.5.4
          pod-template-hash: f6568867
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.5.4
          imagePullPolicy: IfNotPresent
          name: cert-manager
          ports:
          - containerPort: 9402
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-03-13T17:19:33Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.5.4
      pod-template-hash: 8559f675ff
    name: cert-manager-webhook-8559f675ff
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: 898eb1b0-e3fb-45ac-8b5c-706eb6408679
    resourceVersion: "132492"
    uid: 99981aff-f37b-498a-b56d-f1b68ae73947
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 8559f675ff
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.5.4
          pod-template-hash: 8559f675ff
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook,cert-manager-webhook.cert-manager,cert-manager-webhook.cert-manager.svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.5.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-03-13T16:53:24Z"
    generation: 1
    labels:
      app: foodcatalogueapp
      pod-template-hash: 5bf5c56fb6
    name: foodcatalogueapp-5bf5c56fb6
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: foodcatalogueapp
      uid: 55a1d494-3bd4-4533-849c-c47d7729fe67
    resourceVersion: "132751"
    uid: 98034f47-d99d-4350-93b4-218f419b9dac
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: foodcatalogueapp
        pod-template-hash: 5bf5c56fb6
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: foodcatalogueapp
          pod-template-hash: 5bf5c56fb6
      spec:
        containers:
        - env:
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                key: mysql-username
                name: secret
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mysql-password
                name: secret
          - name: SPRING_DATASOURCE_URL
            valueFrom:
              configMapKeyRef:
                key: foodcataloguedb_url
                name: configmap
          image: elfn/food-catalogue-srv:latest
          imagePullPolicy: Always
          name: foodcatalogueapp
          ports:
          - containerPort: 9092
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-03-13T16:53:25Z"
    generation: 1
    labels:
      app: orderapp
      pod-template-hash: 6b76d9655c
    name: orderapp-6b76d9655c
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: orderapp
      uid: 3b3bc09a-58ee-42b9-b7f5-99b83cd6d7ab
    resourceVersion: "132512"
    uid: 1b4cb969-41d0-4490-99ec-1b1e434abd50
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: orderapp
        pod-template-hash: 6b76d9655c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: orderapp
          pod-template-hash: 6b76d9655c
      spec:
        containers:
        - env:
          - name: JAVA_TOOL_OPTIONS
            value: -Djdk.tls.client.protocols=TLSv1.2
          - name: SPRING_DATA_MONGODB_URI
            valueFrom:
              configMapKeyRef:
                key: orderdb_url
                name: configmap
          - name: SPRING_DATA_MONGODB_DATABASE
            value: orderdb
          image: elfn/order-srv:latest
          imagePullPolicy: Always
          name: orderapp
          ports:
          - containerPort: 9094
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-03-13T16:53:25Z"
    generation: 1
    labels:
      app: restaurantapp
      pod-template-hash: 6b5f66885b
    name: restaurantapp-6b5f66885b
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: restaurantapp
      uid: f05c7818-ad20-4bf4-a407-4818a0056073
    resourceVersion: "132764"
    uid: ed1a6135-c758-4a61-8dcf-f113632cf1bc
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: restaurantapp
        pod-template-hash: 6b5f66885b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: restaurantapp
          pod-template-hash: 6b5f66885b
      spec:
        containers:
        - env:
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                key: mysql-username
                name: secret
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mysql-password
                name: secret
          - name: SPRING_DATASOURCE_URL
            valueFrom:
              configMapKeyRef:
                key: restaurantdb_url
                name: configmap
          image: elfn/restaurant-srv:latest
          imagePullPolicy: Always
          name: restaurantapp
          ports:
          - containerPort: 9091
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-03-13T16:53:25Z"
    generation: 1
    labels:
      app: userapp
      pod-template-hash: 59ddd4b6db
    name: userapp-59ddd4b6db
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: userapp
      uid: 874e4422-77b7-4ff9-9cba-fbd1e7542e83
    resourceVersion: "132527"
    uid: 5061ac77-73fc-4694-8576-9beb4e751d9c
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: userapp
        pod-template-hash: 59ddd4b6db
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: userapp
          pod-template-hash: 59ddd4b6db
      spec:
        containers:
        - env:
          - name: SPRING_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                key: mysql-username
                name: secret
          - name: SPRING_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mysql-password
                name: secret
          - name: SPRING_DATASOURCE_URL
            valueFrom:
              configMapKeyRef:
                key: userdb_url
                name: configmap
          image: elfn/user-srv:latest
          imagePullPolicy: Always
          name: userapp
          ports:
          - containerPort: 9093
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-03-13T17:26:03Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/name: aws-load-balancer-controller
      pod-template-hash: 656548cdd8
    name: aws-load-balancer-controller-656548cdd8
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: aws-load-balancer-controller
      uid: 53057b5d-1eab-44d2-b790-60e25bb5c392
    resourceVersion: "132548"
    uid: a165fd58-3a63-43c4-87aa-b7688de4bc34
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/name: aws-load-balancer-controller
        pod-template-hash: 656548cdd8
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/name: aws-load-balancer-controller
          pod-template-hash: 656548cdd8
      spec:
        containers:
        - args:
          - --cluster-name=aws-eks-cluster
          - --ingress-class=alb
          - --aws-vpc-id=vpc-0b8cd57099bf44a35
          - --aws-region=us-east-2
          image: codedecode25/aws-load-balancer:v2.4.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: 61779
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: controller
          ports:
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1337
        serviceAccount: aws-load-balancer-controller
        serviceAccountName: aws-load-balancer-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: aws-load-balancer-webhook-tls
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-03-13T14:13:56Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 6556f9967c
    name: coredns-6556f9967c
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: e9d0bcf6-2054-4c07-b5da-92a7b29646db
    resourceVersion: "132567"
    uid: b5a9c5f5-7529-4989-8037-825b629cb3d3
  spec:
    replicas: 2
    selector:
      matchLabels:
        eks.amazonaws.com/component: coredns
        k8s-app: kube-dns
        pod-template-hash: 6556f9967c
    template:
      metadata:
        creationTimestamp: null
        labels:
          eks.amazonaws.com/component: coredns
          k8s-app: kube-dns
          pod-template-hash: 6556f9967c
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: 602401143452.dkr.ecr.us-east-2.amazonaws.com/eks/coredns:v1.11.1-eksbuild.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        - key: CriticalAddonsOnly
          operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 1
    replicas: 2
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"annotations":{},"name":"eureka","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"eureka"}},"serviceName":"eureka-service","template":{"metadata":{"labels":{"app":"eureka"}},"spec":{"containers":[{"env":[{"name":"EUREKA_SERVER_ADDRESS","valueFrom":{"configMapKeyRef":{"key":"eureka_service_address","name":"configmap"}}}],"image":"elfn/eureka:latest","imagePullPolicy":"Always","name":"eureka","ports":[{"containerPort":8761}]}]}}}}
    creationTimestamp: "2024-03-13T14:26:06Z"
    generation: 1
    name: eureka
    namespace: default
    resourceVersion: "132594"
    uid: e9ea47f3-8704-4113-9fc8-74f037fc8e0a
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: eureka
    serviceName: eureka-service
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: eureka
      spec:
        containers:
        - env:
          - name: EUREKA_SERVER_ADDRESS
            valueFrom:
              configMapKeyRef:
                key: eureka_service_address
                name: configmap
          image: elfn/eureka:latest
          imagePullPolicy: Always
          name: eureka
          ports:
          - containerPort: 8761
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 0
    collisionCount: 0
    currentReplicas: 1
    currentRevision: eureka-5c6f45db4f
    observedGeneration: 1
    replicas: 1
    updateRevision: eureka-5c6f45db4f
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
